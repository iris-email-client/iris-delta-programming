delta dSecurityBaseMail {

	modifies br.unb.cic.iris.mail.EmailReceiver {

		adds import java.io.InputStream;
		adds import java.lang.reflect.Method;
		adds import javax.mail.internet.MimeBodyPart;
		adds import javax.mail.internet.MimeMessage;
		adds import javax.mail.internet.MimeMultipart;
		adds import br.unb.cic.iris.i18n.MessageBundle;
		adds import br.unb.cic.iris.mail.pgp.PgpManager;
		adds import br.unb.cic.iris.util.MessageUtils;

		adds private String from;

		removes convertToIrisMessage(Message message);

		adds private EmailMessage convertToIrisMessage(Message message) throws IOException, MessagingException {
			MimeMessage m = ( MimeMessage ) message;

			from = m.getFrom()[0].toString();
			from = from.substring(from.indexOf('<') + 1);
			from = from.substring(0, from.length() - 1);

			EmailMessage msg = new EmailMessage();
			try {
				msg.setMessage(getText(m));
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			msg.setBcc(convertAddressToString(m.getRecipients(RecipientType.BCC)));
			msg.setCc(convertAddressToString(m.getRecipients(RecipientType.CC)));
			msg.setTo(convertAddressToString(m.getRecipients(RecipientType.TO)));
			msg.setFrom(from);
			msg.setSubject(m.getSubject());
			msg.setDate(m.getReceivedDate());

			return msg;
		}

		removes getText(Message message);

		adds protected String getText(Object content) throws Exception {
			try {
				Method method = getClass().getDeclaredMethod("getText",
					content.getClass());
				return method.invoke(this, content).toString();
			}
			catch(NoSuchMethodException ex) {
				throw new RuntimeException("can't read message type: " + content.getClass());
			}
		}

		adds protected String getText(javax.mail.internet.MimeMultipart multi) throws Exception {
			if(multi instanceof Multipart) {
				return getText(( Multipart ) multi);
			}
			return getText(multi);
		}

		adds protected String getText(Multipart multi) throws Exception {
			int parts = multi.getCount();
			for(int j = 0; j < parts;j++) {
				MimeBodyPart part = ( MimeBodyPart ) multi.getBodyPart(j);
				return getText(part.getContent());
			}
			return getText(multi);
		}

		adds protected String getText(MimeMessage msg) throws Exception {
			return getText(msg.getContent());
		}

		adds protected String getText(InputStream msg) {
			return MessageUtils.getStringFromInputStream(msg);
		}

		adds protected String getText(String str) {
			return str;
		}
	}

	modifies br.unb.cic.iris.mail.EmailSender {
		adds import br.unb.cic.iris.mail.pgp.PgpManager;
		adds import br.unb.cic.iris.mail.pgp.SecurityType;
		removes send(EmailMessage email);
		removes createMessage(final EmailMessage email);

		// emails to be sent are processed by this method before beeing mailed.
		// This was needed for feature refinement or delta refinement.
		adds private MimeMessage outgoing(MimeMessage msg, List<SecurityType> types) throws MessagingException, Exception {
			return msg;	
		}


		adds protected MimeMessage createMessage(final EmailMessage email) throws
		MessagingException, UnsupportedEncodingException {
			final MimeMessage message = new MimeMessage(session.getSession());
			message.setSubject(email.getSubject(), session.getEncoding());
			message.setFrom(new InternetAddress(email.getFrom(), session.getEncoding()));
			message.setRecipient(RecipientType.TO, new InternetAddress(email.getTo()));
			message.setText(email.getMessage(), session.getEncoding());
			
			if(StringUtil.notEmpty(email.getCc())) {
				message.setRecipient(RecipientType.CC, new InternetAddress(email.getCc()));
			}
			
			if(StringUtil.notEmpty(email.getBcc())) {
				message.setRecipient(RecipientType.BCC, new InternetAddress(email.getBcc()));
			}
			
			message.setSentDate(new Date());
			return message;
		}

		adds public void send(EmailMessage email) throws EmailException {
			List<String> errorMessages = validateEmailMessage(email);
			if(errorMessages.isEmpty()) {
				try {
					final Message message = createMessage(email);
					message.saveChanges();
					send(message);
				}
				catch(final UnsupportedEncodingException e) {
					throw new EmailException(MessageBundle.message("error.invalid.encoding", e.getMessage()));
				}
				catch(final MessagingException e) {
					throw new EmailException(MessageBundle.message("error.send.email", e.getMessage()));
				}
			}
			else {
				throw new EmailMessageValidationException(errorMessages);
			}
		}

		adds public void send(Message message) throws EmailException {
			try {
				Transport transport = createTransport();
				session.connect(transport, provider.getTransportHost(), provider.getTransportPort());
				System.out.println("Sending message ...");
				transport.sendMessage(message, message.getAllRecipients());
				transport.close();
			}
			catch(Exception e) {
				throw new EmailException(MessageBundle.message("error.send.email", e.getMessage()));
			}
		}

		adds public void send(EmailMessage msg, List<SecurityType> types) throws EmailException {

			try {
				MimeMessage emailMessage = createMessage(msg);
				if(types != null) {
					emailMessage = outgoing(emailMessage, types);
				}
				send(emailMessage);
			}
			catch(Exception e) {
				throw new EmailException(MessageBundle.message("error.send.email",
						e.getMessage()));
			}
		}
	}
	
	adds {
		package br.unb.cic.iris.util;

		import java.io.BufferedReader;
		import java.io.IOException;
		import java.io.InputStream;
		import java.io.InputStreamReader;
		import java.util.StringTokenizer;

		public class MessageUtils {

			public static String getMimeType(String contentType) {
				String str = "unknown";
				StringTokenizer st = new StringTokenizer(contentType.trim(), ";");
				if(st.hasMoreTokens()) {
					str = st.nextToken();
				}
				return str.toLowerCase();
			}

			public static String getStringFromInputStream(InputStream is) {
				BufferedReader br = null;
				StringBuilder sb = new StringBuilder();

				String line;
				try {
					br = new BufferedReader(new InputStreamReader(is));
					while((line = br.readLine()) != null) {
						sb.append(line);
					}
				}
				catch(IOException e) {
					e.printStackTrace();
				}
				finally {
					if(br != null) {
						try {
							br.close();
						}
						catch(IOException e) {
							e.printStackTrace();
						}
					}
				}

				return sb.toString();

			}
		}

	}

	modifies br.unb.cic.iris.mail.IEmailClient {
		adds import br.unb.cic.iris.mail.pgp.SecurityType;
		//TODO: add or not add the import of class List here? If the modified class removes the 
		// the import we are broken...What is better?
		adds public void send(EmailMessage message, List<SecurityType> types) throws
		EmailException;
	}

	modifies br.unb.cic.iris.mail.EmailClient {
		adds import br.unb.cic.iris.mail.pgp.SecurityType;

		adds public void send(EmailMessage msg, List<SecurityType> types) throws
		EmailException {
			sender.send(msg, types);
		}
	}
}