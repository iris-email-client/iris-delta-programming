delta dSecurityPgp {

	adds {
		package br.unb.cic.iris.mail.pgp;

		//TODO: Featurize this? 
		public enum SecurityType {
			SIGN, 
			ENCRYPT;
		}
	}

	adds {
		package br.unb.cic.iris.mail.pgp;

		import java.io.File;
		import java.io.FileInputStream;
		import java.io.FileNotFoundException;
		import java.io.IOException;
		import java.security.Key;
		import java.security.NoSuchProviderException;
		import java.security.Security;
		import java.util.Iterator;
		import java.util.Properties;

		import net.suberic.crypto.EncryptionKeyManager;
		import net.suberic.crypto.EncryptionManager;
		import net.suberic.crypto.EncryptionUtils;

		import org.bouncycastle.jce.provider.BouncyCastleProvider;

		import br.unb.cic.iris.core.Configuration;
		import br.unb.cic.iris.core.exception.EmailException;

		//TODO tem q ver se ainda precisa instalar isso:
		//Download http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html
		//Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 8 Download
		
		@SuppressWarnings("rawtypes")
		public class PgpKeyManager {

			public static final String CONFIG_FILE_PRIVATE = "gpg.file.private";
			public static final String CONFIG_FILE_PUBLIC = "gpg.file.public";
			public static final String CONFIG_FILE_SECRET = "gpg.file.secret";
			/*TODO ADD no account.properties:
			gpg.file.private=/home/pedro/.gnupg/secring.gpg
			gpg.file.public=/home/pedro/.gnupg/pubring.gpg
			gpg.file.secret=12345678
			*/

			static final String PROVIDER = "BC";
			static final int KEY_SIZE = 2048;

			private String PRIVATE_FILE;
			private String PUBLIC_FILE;
			private char [] FILE_SECRET;
			private EncryptionUtils pgpUtils;

			static {
				// Security.addProvider(new BouncyCastleProvider());
				Security.insertProviderAt(new BouncyCastleProvider(), 0);
				System.out.println("Adding Bouncy Castle Provider ...");
			}

			public PgpKeyManager() throws FileNotFoundException, IOException, NoSuchProviderException {
				Properties props = new Properties();
				props.load(new FileInputStream(new
						File(Configuration.accountPropertyFile())));
				PRIVATE_FILE = props.getProperty(CONFIG_FILE_PRIVATE);
				PUBLIC_FILE = props.getProperty(CONFIG_FILE_PUBLIC);
				System.out.println("Public keystore: " + PUBLIC_FILE);
				System.out.println("Private keystore: " + PRIVATE_FILE);
				FILE_SECRET = props.getProperty(CONFIG_FILE_SECRET).toCharArray();
				pgpUtils = getEncryptionUtils();
			}

			public Key getPrivateKey(String id) throws Exception {
				EncryptionKeyManager pgpKeyMgr = pgpUtils.createKeyManager();
				pgpKeyMgr.loadPrivateKeystore(new FileInputStream(new File(PRIVATE_FILE)),
					FILE_SECRET);
				Iterator it = pgpKeyMgr.privateKeyAliases().iterator();
				while(it.hasNext()) {
					String alias = it.next().toString();
					if(alias.contains(id)) {
						return pgpKeyMgr.getPrivateKey(alias, FILE_SECRET);
					}
				}
				throw new EmailException("Couldn't find private key for: " + id +
					". Please, generate the key pair");
			}

			public Key getPublicKey(String email) throws Exception {
				String publicKeyAlias = getLocalAlias(email);
				System.out.println("publicKeyAlias: " + publicKeyAlias);
				EncryptionKeyManager pgpKeyMgr = pgpUtils.createKeyManager();
				pgpKeyMgr.loadPublicKeystore(new FileInputStream(new File(PUBLIC_FILE)),
					FILE_SECRET);
				return pgpKeyMgr.getPublicKey(publicKeyAlias);
			}

			// o publicKeyAlias eh o email da pessoa.
			// O alias dentro do arquivo eh composto de ID NOME COMENTARIO EMAIL
			// Entao esse metodo pega o alias real (dentro arquivo) que contenha o email passado como param
			// esse alias "real" sera usado para recuperar a chave publica
			public String getLocalAlias(String email) throws Exception {
				EncryptionKeyManager pgpKeyMgr = pgpUtils.createKeyManager();
				pgpKeyMgr.loadPublicKeystore(new FileInputStream(new File(PUBLIC_FILE)),
					FILE_SECRET);
				Iterator it = pgpKeyMgr.publicKeyAliases().iterator();
				while(it.hasNext()) {
					String alias = it.next().toString();
					if(alias.contains(email)) {
						return alias;
					}
				}
				throw new EmailException("Couldn't find public key for: " + email +
					". Please, install the public key.");
			}

			private EncryptionUtils getEncryptionUtils() throws NoSuchProviderException {
				return EncryptionManager.getEncryptionUtils(EncryptionManager.PGP);
			}

			public boolean existKeys() {
				return new File(PRIVATE_FILE).exists() && new File(PUBLIC_FILE).exists();
			}

		}
	}

	adds {

		package br.unb.cic.iris.mail.pgp;

		import java.io.FileNotFoundException;
		import java.io.IOException;
		import java.security.Key;
		import java.security.NoSuchProviderException;

		import javax.mail.Message.RecipientType;
		import javax.mail.Session;
		import javax.mail.internet.MimeMessage;
		import javax.mail.internet.MimeMultipart;
		import javax.mail.internet.MimePart;

		import net.suberic.crypto.EncryptionManager;
		import net.suberic.crypto.EncryptionUtils;
		import br.unb.cic.iris.core.SystemFacade;
		import br.unb.cic.iris.core.exception.EmailUncheckedException;

		public class PgpManager {
			private static final PgpManager instance = new PgpManager();

			private PgpKeyManager keyManager;
			private EncryptionUtils cryptoUtils;

			public PgpManager() {
				try {
					keyManager = new PgpKeyManager();
					cryptoUtils = getEncryptionUtils();
				}
				catch(NoSuchProviderException e) {
					throw new EmailUncheckedException("No such provider: " + e.getMessage(),
						e);
				}
				catch(FileNotFoundException e) {
					throw new EmailUncheckedException("Config file not found: " +
						e.getMessage(), e);
				}
				catch(IOException e) {
					throw new EmailUncheckedException("Error reading config file: " +
						e.getMessage(), e);
				}
			}

			public static PgpManager instance() {
				return instance;
			}

			private EncryptionUtils getEncryptionUtils() throws NoSuchProviderException {
				return EncryptionManager.getEncryptionUtils(EncryptionManager.PGP);
			}

		}

	}

}