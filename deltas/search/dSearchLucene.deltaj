delta dSearchLucene {

	modifies br.unb.cic.iris.persistence.lucene.EmailDAO {

		adds import java.util.ArrayList;
		adds import org.apache.lucene.search.BooleanClause;
		adds import org.apache.lucene.search.BooleanClause.Occur;
		adds import org.apache.lucene.search.BooleanQuery;
		adds import org.apache.lucene.search.NumericRangeQuery;
		adds import org.apache.lucene.analysis.standard.StandardAnalyzer;
		adds import org.apache.lucene.queryparser.classic.QueryParser;
		adds import org.apache.lucene.search.ScoreDoc;
		adds import org.apache.lucene.search.TopDocs;
		
		
		// Lucene's ParseException conflicts with java.text.ParseException.
		adds public List<EmailMessage> search(String queryStr, int numberOfHits)
		throws org.apache.lucene.queryparser.classic.ParseException, IOException {

		//Default field of search set to "subject".
			Query userQuery = new QueryParser("subject", new
				StandardAnalyzer()).parse(queryStr);
			Query typeQuery = new TermQuery(new Term("type", "email"));

			BooleanQuery query = new BooleanQuery();
			query.add(new BooleanClause(typeQuery, Occur.MUST));
			query.add(new BooleanClause(userQuery, Occur.MUST));

			IndexSearcher searcher = IndexManager.getSearcher();

			TopDocs docs = searcher.search(query, numberOfHits);
			List<EmailMessage> emails = new ArrayList<EmailMessage>();

			for(ScoreDoc sDoc : docs.scoreDocs) {
				EmailDAO emailDAO = EmailDAO.instance();
				Document doc = searcher.doc(sDoc.doc);
				EmailMessage email = null;
				try {
					emailDAO.fromDocument(doc);
				}
				catch(ParseException e) {
				// NOTE: Supressed because such exception should never happen
				// when retrieving documents from the index.

				}
				if(email != null) emails.add(email);
			}
			return emails;
		}
	}
}