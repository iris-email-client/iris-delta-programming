delta dCommand {
	adds{
		/*
		 * MailCommand
		 *--------------------------------------- 
		 *  version: 0.0.1 
		 *  date: September, 2014
		 *  author: rbonifacio
		 *  
		 *  changes: (none)  
		 */
		package br.unb.cic.iris.command;
		
		/**
		 * An interface for processing mail commands.
		 * 
		 * @author rbonifacio
		 */
		public interface MailCommand {
			/**
			 * Each command must provide an execute method. The execute method will be
			 * triggered when the uses ask to.
			 */
			public void execute();
		
			public void setParameters(String[] parameters);
		
			/**
			 * Each command must provide an explain message, which should explain its
			 * arguments and usage data.
			 */
			public void explain();
		
			public String getCommandName();
		}
	}
	
	adds{
		package br.unb.cic.iris.command;

		public interface CommandListener {
		
			public void commandAdded(MailCommand command);
		
		}
	}
	
	adds{
		package br.unb.cic.iris.command;

		public abstract class AbstractMailCommand implements MailCommand {
			protected String[] parameters;
		
			@Override
			public void setParameters(String[] parameters) {
				this.parameters = parameters;
			}
		
			protected boolean validParameters() {
				return parameters != null && parameters.length > 0;
			}
		
		}
	}
	
	adds{
		/*
		 * CommandNotFoundException
		 * -------------------------------------
		 *  version: 0.0.1
		 *  
		 *  date: September, 2014
		 *  
		 *  authors: rbonifacio
		 *  
		 *  List of changes: (none)
		 */
		package br.unb.cic.iris.command;
		
		/**
		 * Exception that must be thrown when the interpreter could not execute (find) a
		 * user command.
		 * 
		 * @author ExceptionHandling
		 */
		public class CommandNotFoundException extends RuntimeException {
		
			private static final long serialVersionUID = 1L;
		
			// TODO: mover para package de excecoes?
			public CommandNotFoundException() {
			}
		
			public CommandNotFoundException(String msg) {
				super(msg);
			}
		
			public CommandNotFoundException(Throwable cause) {
				super(cause);
			}
		}
	}
	
	
	adds{
		package br.unb.cic.iris.command;

		import java.util.List;
		
		import br.unb.cic.iris.core.exception.EmailException;
		
		public interface ICommandManager {
		
			// deve permitir adicao dinamica/estatica (tipo plugins)
			public void addCommand(MailCommand command) throws EmailException;
		
			public MailCommand getCommand(String commandName) throws EmailException;
		
			// lista todos os comandos registrados
			public List<MailCommand> listAll();
		
			public void addCommandListener(CommandListener listener);
		
			public void reload() throws Exception;
			// TODO outras operacoes
		
		}
	}
}