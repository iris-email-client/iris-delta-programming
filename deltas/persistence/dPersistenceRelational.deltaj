delta dPersistenceRelational {
	modifies br.unb.cic.iris.core.FolderManager {
		adds import br.unb.cic.iris.persistence.relational.EmailDAO;
		adds import br.unb.cic.iris.persistence.relational.FolderDAO;
	}

	modifies br.unb.cic.iris.core.SystemFacade {
		adds import br.unb.cic.iris.persistence.relational.EmailDAO;
		adds import br.unb.cic.iris.persistence.relational.FolderDAO;
	}

	adds {
		package br.unb.cic.iris.core.exception;

		public class DBException extends EmailException {

			private static final long serialVersionUID = 1L;

			public DBException(String message, Exception cause) {
				super(message, cause);
			}
		}
	}

	adds {
		package br.unb.cic.iris.core.model;

		import javax.persistence.Entity;
		import javax.persistence.Id;
		import javax.persistence.Inheritance;
		import javax.persistence.GeneratedValue;
		import org.hibernate.annotations.GenericGenerator;		
		import javax.persistence.InheritanceType;
		import javax.persistence.Table;

		@Entity
		@Table(name = "TB_FOLDER_CONTENT")
		@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
		public abstract class FolderContent {
			public FolderContent() {
				this(null);
			}

			public FolderContent(String id) {
				super();
				this.id = id;
			}

			@Id
			@GeneratedValue(generator = "uuid")
			@GenericGenerator(name = "uuid", strategy = "uuid2")
			private String id;

			public String getId() {
				return id;
			}

			public void setId(String id) {
				this.id = id;
			}
		}
	}

	removes br.unb.cic.iris.core.model.IrisFolder;
	adds {
		package br.unb.cic.iris.core.model;

		import java.util.ArrayList;
		import java.util.List;

		import javax.persistence.Entity;
		import javax.persistence.Table;
		import javax.persistence.CascadeType;
		import javax.persistence.Column;
		import javax.persistence.FetchType;
		import javax.persistence.OneToMany;

		@Entity
		@Table(name = "TB_FOLDER")
		public class IrisFolder extends FolderContent {
			public static final String INBOX = "INBOX";
			public static final String OUTBOX = "OUTBOX";

			@Column(name = "NAME", unique = true, length = 512)
			private String name;

			@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
			private List<FolderContent> contents;

			public IrisFolder() {
				this(null, "");
			}

			public IrisFolder(String name) {
				this(null, name);
			}

			public IrisFolder(String id, String name) {
				super(id);
				this.name = name;
				contents = new ArrayList<FolderContent>();
			}

			public String getName() {
				return name;
			}

			public void setName(String name) {
				this.name = name;
			}

			public void addElement(FolderContent e) {
				contents.add(e);
			}

			public List<FolderContent> getContents() {
				return contents;
			}
		}
	}

	adds {
		package br.unb.cic.iris.core.model;

		import java.util.Date;

		import javax.persistence.Column;
		import javax.persistence.Entity;
		import javax.persistence.FetchType;
		import javax.persistence.JoinColumn;
		import javax.persistence.ManyToOne;
		import javax.persistence.Table;
		import javax.persistence.Temporal;
		import javax.persistence.TemporalType;

		@Entity
		@Table(name = "TB_MESSAGE")
		public class EmailMessage extends FolderContent {
			@Column(name = "MSG_FROM", length = 1024)
			private String from;

			@Column(name = "RECIPIENT", length = 1024)
			private String to;

			@Column(name = "CC_RECIPIENT", length = 1024)
			private String cc;

			@Column(name = "BCC_RECIPIENT", length = 1024)
			private String bcc;

			@Column(name = "SUBJECT", length = 1024)
			private String subject;

			@Column(name = "MESSAGE_CONTENT", columnDefinition = "TEXT")
			private String message;

			@Temporal(TemporalType.TIMESTAMP)
			@Column(name = "DATE")
			private Date date;

			@ManyToOne(fetch = FetchType.LAZY)
			@JoinColumn(name = "FOLDER_ID", nullable = false)
			private IrisFolder folder;

			//TODO: duplicate code is not cool.
			public EmailMessage() {
			}
			
			public EmailMessage(String to, String subject, String message) {
				this(null, to, subject, message);
			}
			
			public EmailMessage(String from, String to, String subject, String message, Date date, IrisFolder folder) {
				this(from, to, null, null, subject, message, date, folder);
			}
		
			public EmailMessage(String from, String to, String subject, String message) {
				this(from, to, null, null, subject, message);
			}
		
			public EmailMessage(String from, String to, String cc, String bcc,
					String subject, String message) {
				this(from, to, cc, bcc, subject, message, null, null);
			}
			public EmailMessage(String from, String to, String cc, String bcc,
					String subject, String message, Date date, IrisFolder folder) {
				this.from = from;
				this.to = to;
				this.cc = cc;
				this.bcc = bcc;
				this.subject = subject;
				this.message = message;
				this.date = date;
				this.folder = folder;
			}

			public Date getDate() {
				return date;
			}

			public void setDate(Date date) {
				this.date = date;
			}

			public void setTo(String to) {
				this.to = to;
			}

			public void setCc(String cc) {
				this.cc = cc;
			}

			public void setBcc(String bcc) {
				this.bcc = bcc;
			}

			public void setSubject(String subject) {
				this.subject = subject;
			}

			public void setMessage(String message) {
				this.message = message;
			}

			public String getFrom() {
				return from;
			}

			public void setFrom(String from) {
				this.from = from;
			}

			public String getTo() {
				return to;
			}

			public String getCc() {
				return cc;
			}

			public String getBcc() {
				return bcc;
			}

			public String getSubject() {
				return subject;
			}

			public String getMessage() {
				return message;
			}

			public IrisFolder getFolder() {
				return folder;
			}

			public void setFolder(IrisFolder folder) {
				this.folder = folder;
			}

			@Override
			public String toString() {
				return String.format("%s - %s - %s - %s", getId(), getFrom(), getSubject(),
					getDate());
			}
		}
	}

	/*modifies br.unb.cic.iris.core.model.EmailMessage {
		adds import javax.persistence.Column;
		adds import javax.persistence.FetchType;
		adds import javax.persistence.JoinColumn;
		adds import javax.persistence.ManyToOne;
		adds superclass AbstractEmailMessage;
		 
		removes from; 
		adds @Column(name="MSG_FROM") private String from;
		
		removes to;
		adds @Column(name="RECIPIENT") private String to;
		
		removes cc;
		adds @Column(name="CC_RECIPIENT") private String cc;
		
		removes bcc;
		adds @Column(name="BCC_RECIPIENT") private String bcc;
		
		removes subject;
		adds @Column(name="SUBJECT") private String subject;
		
		removes message;
		adds @Column(name="MESSAGE_CONTENT") private String message;
		
		removes date;
		adds @Column(name="DATE") private Date date;
		
		removes folder;
		adds @ManyToOne(fetch = FetchType.LAZY) @JoinColumn(name = "FOLDER_ID", nullable = false) private IrisFolder folder;
	}*/

	adds {
		package br.unb.cic.iris.persistence.relational;

		import java.lang.reflect.ParameterizedType;
		import java.util.List;

		import org.hibernate.HibernateException;
		import org.hibernate.Query;
		import org.hibernate.Session;
		import org.hibernate.criterion.MatchMode;

		import br.unb.cic.iris.core.exception.DBException;
		import br.unb.cic.iris.persistence.relational.HibernateUtil;

		public abstract class AbstractDAO<T> {
			private Class<T> clazz;
			protected Session session;

			public AbstractDAO() {
				clazz = ( Class<T> )(( ParameterizedType )
					getClass().getGenericSuperclass()).getActualTypeArguments()[0];
			}

			public void saveOrUpdate(T obj) throws DBException {
				try {
					startSession();
					session.saveOrUpdate(obj);
					//session.getTransaction().commit();

				}
				catch(HibernateException e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
			}

			public void delete(T t) throws DBException {
				try {
					startSession();
					session.delete(t);
				}
				catch(HibernateException e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
			}

			public T findById(String uuid) throws DBException {
				T obj = null;
				try {
					startSession();
					obj = ( T ) session.load(clazz, uuid);
				}
				catch(HibernateException e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
				return obj;
			}
			
			public List<T> findAll() throws DBException {
				List<T> objects = null;
				try {
					startSession();
					Query query = session.createQuery("from " + clazz.getName());
					objects = query.list();
				}
				catch(HibernateException e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
				return objects;
			}

			public List<T> findByExample(T filtro, MatchMode matchMode, boolean
				ignoreCase) throws DBException {
				try {
					startSession();
					org.hibernate.criterion.Example example =
					org.hibernate.criterion.Example.create(filtro);

					if(matchMode != null) {
						example = example.enableLike(matchMode);
					}

					if(ignoreCase) {
						example = example.ignoreCase();
					}

					return session.createCriteria(clazz).add(example).list();
				}
				catch(HibernateException e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
				return new java.util.ArrayList<T>();
			}

			protected void handleException(Exception e) throws DBException {
				session.getTransaction().rollback();
				throw new DBException(e.getMessage(), e);
			}

			protected void startSession() throws HibernateException {
				session = HibernateUtil.getSessionFactory().openSession();
				session.beginTransaction();
				/*if(session == null){
					session = HibernateUtil.getSessionFactory().getCurrentSession();
					session.beginTransaction();
				}*/
			}
			protected void closeSession() {
				try {
					if(session != null && session.isOpen()) {
						session.getTransaction().commit();
						session.flush();
						session.close();
					}
				}
				finally {
					session = null;
				}
			}
		}
	}

	adds {
	/*
		 * EmailDAO.java
		 * ---------------------------------
		 *  version: 0.0.1
		 *  date: Sep 18, 2014
		 *  author: rbonifacio
		 *  list of changes: (none) 
		 */
		package br.unb.cic.iris.persistence.relational;

		import java.util.Date;
		import java.util.List;

		import org.hibernate.Criteria;
		import org.hibernate.criterion.Restrictions;

		import br.unb.cic.iris.core.exception.DBException;
		import br.unb.cic.iris.core.model.EmailMessage;
		import br.unb.cic.iris.persistence.IEmailDAO;
		import br.unb.cic.iris.core.model.IrisFolder;

		public final class EmailDAO extends AbstractDAO<EmailMessage> implements
		IEmailDAO {
			private static final String FIND_MAX_DATE =
			"select max(e.date) FROM EmailMessage e";
			private static EmailDAO instance = new EmailDAO();

			private EmailDAO() {
			}

			public static EmailDAO instance() {
				return instance;
			}

			@Override
			public void saveMessage(EmailMessage message) throws DBException {
				super.saveOrUpdate(message);
			}

			@Override
			public Date lastMessageReceived() throws DBException {
				Date date = null;
				try {
					startSession();
					date = ( Date ) session.createQuery(FIND_MAX_DATE).uniqueResult();
				}
				finally {
					closeSession();
				}
				return date;
			}
			public EmailMessage findById(String id) throws DBException {
				EmailMessage obj = null;
				try {
					startSession();
					obj = populate(( EmailMessage ) session.load(EmailMessage.class, id));
				}
				catch(Exception e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
				return obj;
			}

			public List<EmailMessage> listMessages(String idFolder) throws DBException {
				List<EmailMessage> messages = new java.util.ArrayList<EmailMessage>();
				try {
					startSession();
					Criteria criteria =
					session.createCriteria(EmailMessage.class).createCriteria("folder").add(Restrictions.idEq(idFolder));
					messages = populate(( List<EmailMessage> ) criteria.list());
				}
				catch(Exception e) {
					handleException(new DBException("Error listing messages from folder: " +
							idFolder, e));
				}
				finally {
					closeSession();
				}
				return messages;
			}

			private List<EmailMessage> populate(List<EmailMessage> in) {
				List<EmailMessage> list = new java.util.ArrayList<EmailMessage>();
				for(EmailMessage msg : in) {
					list.add(populate(msg));
				}
				return list;
			}

			private EmailMessage populate(EmailMessage in) {
				if(in == null) {
					return null;
				}
				EmailMessage msg = new EmailMessage(in.getFrom(), in.getTo(), in.getCc(),
					in.getBcc(), in.getSubject(), in.getMessage());
				msg.setId(in.getId());
				msg.setFolder(new IrisFolder(in.getFolder().getId(),
						in.getFolder().getName()));
				msg.setDate(in.getDate());
				return msg;
			}
		}
	}

	adds {
		package br.unb.cic.iris.persistence.relational;

		import br.unb.cic.iris.i18n.MessageBundle;

		import br.unb.cic.iris.core.exception.DBException;
		import br.unb.cic.iris.core.exception.EmailException;
		import br.unb.cic.iris.core.model.IrisFolder;
		import br.unb.cic.iris.persistence.IFolderDAO;


		import org.hibernate.Criteria;
		import org.hibernate.criterion.Restrictions;

		public class FolderDAO extends AbstractDAO<IrisFolder> implements IFolderDAO
		{
			private static FolderDAO instance;
			private FolderDAO() {
			}
			public static FolderDAO instance() throws EmailException {
				if(instance == null) {
					instance = new FolderDAO();
					ensureIsCreated(IrisFolder.INBOX);
					ensureIsCreated(IrisFolder.OUTBOX);
				}
				return instance;
			}

			private static void ensureIsCreated(String folderName) throws EmailException
			{
				IrisFolder folder = instance.findByName(folderName);
				if(folder == null) {
					instance.saveOrUpdate(new IrisFolder(folderName));
					System.out.printf("%s folder created.\n", folderName);
				}
			}

			public IrisFolder findById(String id) throws DBException {
				IrisFolder obj = null;
				try {
					startSession();
					obj = populate(( IrisFolder ) session.load(IrisFolder.class, id));
				}
				catch(Exception e) {
					handleException(e);
				}
				finally {
					closeSession();
				}
				return obj;
			}

			public IrisFolder findByName(String folderName) throws DBException {
				try {
					startSession();
					Criteria criteria = session.createCriteria(IrisFolder.class);
					criteria.add(Restrictions.eq("name", folderName));
					return populate(( IrisFolder ) criteria.uniqueResult());
				}
				catch(Exception e) {
					handleException(new
						DBException(MessageBundle.message("error.folder.not.found", folderName),
							e));
				}
				finally {
					closeSession();
				}
				return null;
			}

			private IrisFolder populate(IrisFolder in) {
				if(in == null) {
					return null;
				}
				IrisFolder folder = new IrisFolder(in.getId(), in.getName());
				return folder;
			}
		}
	}

	adds {
	/*
		 * The author disclaims copyright to this source code.  In place of
		 * a legal notice, here is a blessing:
		 *
		 *    May you do good and not evil.
		 *    May you find forgiveness for yourself and forgive others.
		 *    May you share freely, never taking more than you give.
		 *
		 */
		package br.unb.cic.iris.persistence.relational;

		import java.sql.Types;

		import org.hibernate.dialect.Dialect;
		import org.hibernate.dialect.function.AbstractAnsiTrimEmulationFunction;
		import org.hibernate.dialect.function.NoArgSQLFunction;
		import org.hibernate.dialect.function.SQLFunction;
		import org.hibernate.dialect.function.SQLFunctionTemplate;
		import org.hibernate.dialect.function.StandardSQLFunction;
		import org.hibernate.dialect.function.VarArgsSQLFunction;
		import org.hibernate.type.StandardBasicTypes;

		public class SQLiteDialect extends Dialect {
			public SQLiteDialect() {
				registerColumnType(Types.BIT, "boolean");
				registerColumnType(Types.TINYINT, "tinyint");
				registerColumnType(Types.SMALLINT, "smallint");
				registerColumnType(Types.INTEGER, "integer");
				registerColumnType(Types.BIGINT, "bigint");
				registerColumnType(Types.FLOAT, "float");
				registerColumnType(Types.REAL, "real");
				registerColumnType(Types.DOUBLE, "double");
				registerColumnType(Types.NUMERIC, "numeric($p, $s)");
				registerColumnType(Types.DECIMAL, "decimal");
				registerColumnType(Types.CHAR, "char");
				registerColumnType(Types.VARCHAR, "varchar($l)");
				registerColumnType(Types.LONGVARCHAR, "longvarchar");
				registerColumnType(Types.DATE, "date");
				registerColumnType(Types.TIME, "time");
				registerColumnType(Types.TIMESTAMP, "datetime");
				registerColumnType(Types.BINARY, "blob");
				registerColumnType(Types.VARBINARY, "blob");
				registerColumnType(Types.LONGVARBINARY, "blob");
				registerColumnType(Types.BLOB, "blob");
				registerColumnType(Types.CLOB, "clob");
				registerColumnType(Types.BOOLEAN, "boolean");

				registerFunction("concat", new
					VarArgsSQLFunction(StandardBasicTypes.STRING, "", "||", ""));
				registerFunction("mod", new SQLFunctionTemplate(StandardBasicTypes.INTEGER,
						"?1 % ?2"));
				registerFunction("quote", new StandardSQLFunction("quote",
						StandardBasicTypes.STRING));
				registerFunction("random", new NoArgSQLFunction("random",
						StandardBasicTypes.INTEGER));
				registerFunction("round", new StandardSQLFunction("round"));
				registerFunction("substr", new StandardSQLFunction("substr",
						StandardBasicTypes.STRING));
				registerFunction("trim", new AbstractAnsiTrimEmulationFunction() {
						protected SQLFunction resolveBothSpaceTrimFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING, "trim(?1)");
						}

						protected SQLFunction resolveBothSpaceTrimFromFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING, "trim(?2)");
						}

						protected SQLFunction resolveLeadingSpaceTrimFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING, "ltrim(?1)");
						}

						protected SQLFunction resolveTrailingSpaceTrimFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING, "rtrim(?1)");
						}

						protected SQLFunction resolveBothTrimFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING,
								"trim(?1, ?2)");
						}

						protected SQLFunction resolveLeadingTrimFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING,
								"ltrim(?1, ?2)");
						}

						protected SQLFunction resolveTrailingTrimFunction() {
							return new SQLFunctionTemplate(StandardBasicTypes.STRING,
								"rtrim(?1, ?2)");
						}
					});
			}

			@Override
			public boolean supportsIdentityColumns() {
				return true;
			}

			/*
		  public boolean supportsInsertSelectIdentity() {
		    return true; // As specified in NHibernate dialect
		  }
		  */

			@Override
			public boolean hasDataTypeInIdentityColumn() {
				return false; // As specified in NHibernate dialect

			}

			/*
		  public String appendIdentitySelectToInsert(String insertString) {
		    return new StringBuffer(insertString.length()+30). // As specified in NHibernate dialect
		      append(insertString).
		      append("; ").append(getIdentitySelectString()).
		      toString();
		  }
		  */

			@Override
			public String getIdentityColumnString() {
			// return "integer primary key autoincrement";
				return "integer";
			}

			@Override
			public String getIdentitySelectString() {
				return "select last_insert_rowid()";
			}

			@Override
			public boolean supportsLimit() {
				return true;
			}

			@Override
			public boolean bindLimitParametersInReverseOrder() {
				return true;
			}

			@Override
			protected String getLimitString(String query, boolean hasOffset) {
				return query +(hasOffset ? " limit ? offset ?" : " limit ?");
			}

			@Override
			public boolean supportsTemporaryTables() {
				return true;
			}

			@Override
			public String getCreateTemporaryTableString() {
				return "create temporary table if not exists";
			}

			@Override
			public Boolean performTemporaryTableDDLInIsolation() {
				return Boolean.FALSE;
			}

			/*
		  @Override
		  public boolean dropTemporaryTableAfterUse() {
		    return true; // temporary tables are only dropped when the connection is closed. If the connection is pooled...
		  }
		  */

			@Override
			public boolean supportsCurrentTimestampSelection() {
				return true;
			}

			@Override
			public boolean isCurrentTimestampSelectStringCallable() {
				return false;
			}

			@Override
			public String getCurrentTimestampSelectString() {
				return "select current_timestamp";
			}

			//  @Override
			//  public SQLExceptionConverter buildSQLExceptionConverter() {
			//    return new SQLExceptionConverter() {
			//      @Override
			//      public JDBCException convert(SQLException sqlException, String message, String sql) {
			//        final int errorCode = JDBCExceptionHelper.extractErrorCode(sqlException);
			//        if (errorCode == SQLITE_CONSTRAINT) {
			//          final String constraintName = EXTRACTER.extractConstraintName(sqlException);
			//          return new ConstraintViolationException(message, sqlException, sql, constraintName);
			//        } else if (errorCode == SQLITE_TOOBIG || errorCode == SQLITE_MISMATCH) {
			//          return new DataException(message, sqlException, sql);
			//        } else if (errorCode == SQLITE_BUSY || errorCode == SQLITE_LOCKED) {
			//          return new LockAcquisitionException(message, sqlException, sql);
			//        } else if ((errorCode >= SQLITE_IOERR && errorCode <= SQLITE_PROTOCOL) || errorCode == SQLITE_NOTADB) {
			//          return new JDBCConnectionException(message, sqlException, sql);
			//        }
			//        return new GenericJDBCException(message, sqlException, sql);
			//      }
			//    };
			//  }

			//  public static final ViolatedConstraintNameExtracter EXTRACTER = new TemplatedViolatedConstraintNameExtracter() {
			//    public String extractConstraintName(SQLException sqle) {
			//      return extractUsingTemplate( "constraint ", " failed", sqle.getMessage() );
			//    }
			//  };

			@Override
			public boolean supportsUnionAll() {
				return true;
			}

			@Override
			public boolean hasAlterTable() {
				return false; // As specified in NHibernate dialect

			}

			@Override
			public boolean dropConstraints() {
				return false;
			}

			/*
		  public String getAddColumnString() {
		    return "add column";
		  }
		  */

			@Override
			public String getForUpdateString() {
				return "";
			}

			@Override
			public boolean supportsOuterJoinForUpdate() {
				return false;
			}

			@Override
			public String getDropForeignKeyString() {
				throw new
				UnsupportedOperationException("No drop foreign key syntax supported by SQLiteDialect");
			}

			@Override
			public String getAddForeignKeyConstraintString(String constraintName, String
				[] foreignKey, String referencedTable, String [] primaryKey, boolean
				referencesPrimaryKey) {
				throw new
				UnsupportedOperationException("No add foreign key syntax supported by SQLiteDialect");
			}

			@Override
			public String getAddPrimaryKeyConstraintString(String constraintName) {
				throw new
				UnsupportedOperationException("No add primary key syntax supported by SQLiteDialect");
			}

			@Override
			public boolean supportsIfExistsBeforeTableName() {
				return true;
			}

			/*
		  public boolean supportsCascadeDelete() {
		    return true;
		  }
		  */

/* not case insensitive for unicode characters by default (ICU extension needed)
		  public boolean supportsCaseInsensitiveLike() {
		    return true;
		  }
		  */

			@Override
			public boolean supportsTupleDistinctCounts() {
				return false;
			}

			@Override
			public String getSelectGUIDString() {
				return "select hex(randomblob(16))";
			}
		}
	}

	adds {
		package br.unb.cic.iris.persistence.relational;

		import java.util.ArrayList;
		import java.util.List;
		import java.util.Properties;

		import org.hibernate.SessionFactory;
		import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
		import org.hibernate.cfg.Configuration;
		import org.hibernate.service.ServiceRegistry;

		import br.unb.cic.iris.core.model.EmailMessage;
		import br.unb.cic.iris.core.model.FolderContent;
		import br.unb.cic.iris.core.model.IrisFolder;

		public class HibernateUtil {

			private static final SessionFactory sessionFactory = buildSessionFactory();

			private static SessionFactory buildSessionFactory() {
				classList = new ArrayList<Class>();
				configureClasses();
				try {
					Configuration configuration = new Configuration();
					for(Class clazz : classList) {
						configuration.addAnnotatedClass(clazz);
					}
					configuration.configure();

					Properties properties = configuration.getProperties();

					ServiceRegistry serviceRegistry = new
					StandardServiceRegistryBuilder().applySettings(properties).build();
					return configuration.buildSessionFactory(serviceRegistry);
				}
				catch(Throwable t) {
					throw new ExceptionInInitializerError(t);
				}
			}

			private static List<Class> classList;

			public static void configureClasses() {
				classList.add(FolderContent.class);
				classList.add(EmailMessage.class);
				classList.add(IrisFolder.class);
			}

			public static SessionFactory getSessionFactory() {
				return sessionFactory;
			}

			public static void shutdown() {
				getSessionFactory().close();
			}
		}
	}
}
