delta dBaseFacade {
	adds {
		package br.unb.cic.iris.core;

		
		import java.util.Date;
		import java.util.List;
		
		import javax.mail.Flags;
		import javax.mail.search.AndTerm;
		import javax.mail.search.ComparisonTerm;
		import javax.mail.search.FlagTerm;
		import javax.mail.search.ReceivedDateTerm;
		import javax.mail.search.SearchTerm;

		import br.unb.cic.iris.core.model.Status;
		import br.unb.cic.iris.i18n.MessageBundle;		
		import br.unb.cic.iris.core.exception.DBException;
		import br.unb.cic.iris.core.exception.EmailException;
		import br.unb.cic.iris.core.exception.EmailUncheckedException;
		import br.unb.cic.iris.core.model.EmailMessage;
		import br.unb.cic.iris.core.model.IrisFolder;
		import br.unb.cic.iris.core.model.Status;
		import br.unb.cic.iris.mail.EmailClient;
		import br.unb.cic.iris.mail.EmailProvider;
		import br.unb.cic.iris.mail.IEmailClient;
		import br.unb.cic.iris.mail.provider.DefaultProvider;
		import br.unb.cic.iris.mail.provider.ProviderManager;
		import br.unb.cic.iris.persistence.IEmailDAO;
		
		public final class SystemFacade {
			private static final SystemFacade instance = new SystemFacade();
		
			private IEmailClient client;
			private EmailProvider provider;
		
			private Status status = Status.NOT_CONNECTED;
		
			private SystemFacade() {
				// load config file
				Configuration config = new Configuration();
				// create a default provider based on properties loaded
				provider = new DefaultProvider(config.getProperties());
				// register the default provider
				ProviderManager.instance().addProvider(provider);
				// initiate connection
				connect(provider);
			}
		
			public static SystemFacade instance() {
				return instance;
			}
		
			public void connect(EmailProvider provider) {
				setStatus(Status.NOT_CONNECTED);
				this.provider = provider;
				client = new EmailClient(provider);
				setStatus(Status.CONNECTED);
			}
		
			public void send(EmailMessage message) throws EmailException {
				verifyConnection();
				client.send(message);
				message.setDate(new Date());
				saveMessage(message);
			}
			
			private void saveMessage(EmailMessage message) throws DBException{
				saveMessage(message, IrisFolder.OUTBOX);
			}
			private void saveMessage(EmailMessage message, String folderName) throws DBException{
				IEmailDAO dao = EmailDAO.instance();
				IrisFolder folder = FolderDAO.instance().findByName(folderName);
				message.setFolder(folder);
				dao.saveMessage(message);
			}
		
			public List<IrisFolder> listFolders() throws EmailException {
				return FolderDAO.instance().findAll();
			}
			
			public List<IrisFolder> listRemoteFolders() throws EmailException {
				verifyConnection();
				return client.listFolders();
			}
			
			public List<EmailMessage> listFolderMessages(Integer folderId) throws EmailException {
				return EmailDAO.instance().listMessages(folderId);
			}
			
			public EmailMessage getMessage(Long id) throws EmailException {
				return EmailDAO.instance().findById(id);
			}
			
			public void downloadMessages(String folder) throws EmailException {
				verifyConnection();
				
				SearchTerm searchTerm = null;
				IEmailDAO dao = EmailDAO.instance();
				
				Date lastMessageReceived = dao.lastMessageReceived();
				System.out.println("**************************** lastMessageReceived="+lastMessageReceived);
				if(lastMessageReceived != null){
					// search for newer messages (relative to lastMessageReceived)
					searchTerm = new ReceivedDateTerm(ComparisonTerm.GT, lastMessageReceived);
				}
				
				//retrieve messages from server
				List<EmailMessage> messages = client.getMessages(folder, searchTerm);
				
				//persist messages
				for(EmailMessage message: messages) {
					saveMessage(message, folder);
				}
			}
			
			public List<EmailMessage> getMessages(String folder) throws EmailException {
				//TODO ler as mensagens do banco de dados
				
				
				// apenas para testar ... retorna as mensagens recentes e nao lidas
				Flags seen = new Flags(Flags.Flag.SEEN);
				FlagTerm unseenFlagTerm = new FlagTerm(seen, false);
		
				Flags recent = new Flags(Flags.Flag.RECENT);
				FlagTerm recentFlagTerm = new FlagTerm(recent, true);
		
				SearchTerm searchTerm = new AndTerm(unseenFlagTerm, recentFlagTerm);
		
				// return client.getMessages(folder, searchTerm);
				return client.getMessages(folder, unseenFlagTerm);
				// return client.getMessages(folder, null);
			}
		
			private void verifyConnection() {
				if (!isConnected()) {
					throw new EmailUncheckedException(MessageBundle.message("error.not.connected"));
				}
			}
		
			public boolean isConnected() {
				return Status.CONNECTED == getStatus();
			}
		
			private void setStatus(Status status) {
				this.status = status;
				// notify listerners ...
			}
		
			public Status getStatus() {
				return status;
			}
		
			public EmailProvider getProvider() {
				return provider;
				// TODO clonar pq nao tem como criar um Properties imutavel (nao tem via
				// api padrao)
				/*
				 * try { return provider.clone(); } catch (CloneNotSupportedException e)
				 * { //TODO mensagem throw new EmailUncheckedException("", e); }
				 */
			}		
		}
	}
	
	adds {
		package br.unb.cic.iris.core;


		import br.unb.cic.iris.core.exception.DBException;
		import br.unb.cic.iris.core.exception.EmailException;
		import br.unb.cic.iris.core.exception.EmailUncheckedException;
		import br.unb.cic.iris.core.model.EmailMessage;
		import br.unb.cic.iris.core.model.IrisFolder;
		
		import java.util.List;
		
		public final class FolderManager {
			private static final FolderManager instance = new FolderManager();
			private Integer currentFolderId = null;
			private FolderManager() {
			}
			public static FolderManager instance() {
				return instance;
			}
			public String getCurrentFolderName() {
				if(currentFolderId == null) {
					return "ROOT";
				}
				try {
					return FolderDAO.instance().findById((long) currentFolderId).getName();
				} catch (DBException e) {
					throw new EmailUncheckedException(e.getMessage(),e);
				}
			}
			public void changeToFolder(Integer folderId) throws DBException {
				IrisFolder folder = FolderDAO.instance().findById((long) folderId);
				if(folder != null) {
					currentFolderId = folderId;
				}
			}
			public List<IrisFolder> listFolders() throws EmailException {
				return FolderDAO.instance().findAll();
			}
			public List<EmailMessage> listFolderMessages() throws EmailException {
				if(currentFolderId == null){
					return new java.util.ArrayList<EmailMessage>();
				}
				return EmailDAO.instance().listMessages(currentFolderId);
			}
			public EmailMessage getMessage(Long id) throws EmailException {
				return EmailDAO.instance().findById(id);
			}
		}
	}
}