delta dBaseCommand {
	adds {
		/*
		 * MailCommand
		 *--------------------------------------- 
		 *  version: 0.0.1 
		 *  date: September, 2014
		 *  author: rbonifacio
		 *  
		 *  changes: (none)  
		 */
		package br.unb.cic.iris.command;
		
		/**
		 * An interface for processing mail commands.
		 * 
		 * @author rbonifacio
		 */
		public interface MailCommand {
			/**
			 * Each command must provide an execute method. The execute method will be
			 * triggered when the uses ask to.
			 */
			public void execute();
		
			public void setParameters(java.util.List<String> parameters);
		
			/**
			 * Each command must provide an explain message, which should explain its
			 * arguments and usage data.
			 */
			public void explain();
		
			public String getCommandName();
		}
	}

	adds {
		package br.unb.cic.iris.command;
		
		import br.unb.cic.iris.i18n.MessageBundle;
		import br.unb.cic.iris.core.exception.EmailException;
		import br.unb.cic.iris.core.exception.EmailMessageValidationException;
		import br.unb.cic.iris.core.exception.EmailUncheckedException;
		import java.util.List;
		
		public abstract class AbstractMailCommand implements MailCommand {
			protected List<String> parameters;
		
			@Override
			public void setParameters(List<String> parameters) {
				this.parameters = parameters;
			}
		
			protected boolean validParameters() {
				return parameters != null && parameters.size() > 0;
			}
			
			public static String message(String key){
				return MessageBundle.message(key);
			}
		
			protected abstract void handleExecute() throws EmailException;
		
			public void execute() {
				try {
					handleExecute();
				} catch (EmailUncheckedException eux) {
					System.err.printf("%s: %s\n", MessageBundle.message("error"), eux.getLocalizedMessage());
				} catch (EmailMessageValidationException emvx) {
					System.err.println(MessageBundle.message("error.validation"));
					for (String msg : emvx.getMessages()) {
						System.err.println(" - " + msg);
					}
				} catch (EmailException ex) {
					System.err.printf("%s: %s\n", MessageBundle.message("error"), ex.getMessage());
				} catch (Exception e) {
					e.printStackTrace();
				} catch (Throwable t) {
					t.printStackTrace();
				}
			}
		}		
	}
	
	adds {
		package br.unb.cic.iris.command;
		
		public interface CommandListener {
		
			public void commandAdded(MailCommand command);
		
		}		
	}
	
	adds {
		/*
		 * CommandNotFoundException
		 * -------------------------------------
		 *  version: 0.0.1
		 *  
		 *  date: September, 2014
		 *  
		 *  authors: rbonifacio
		 *  
		 *  List of changes: (none)
		 */
		package br.unb.cic.iris.command;
		
		/**
		 * Exception that must be thrown when the interpreter could not execute (find) a
		 * user command.
		 * 
		 * @author ExceptionHandling
		 */
		public class CommandNotFoundException extends RuntimeException {
		
			private static final long serialVersionUID = 1L;
		
			// TODO: mover para package de excecoes?
			public CommandNotFoundException() {
			}
		
			public CommandNotFoundException(String msg) {
				super(msg);
			}
		
			public CommandNotFoundException(Throwable cause) {
				super(cause);
			}
		}
	}
	
	adds {
		package br.unb.cic.iris.command;
		
		import java.util.List;
		
		import br.unb.cic.iris.core.exception.EmailException;
		
		public interface ICommandManager {
		
			// deve permitir adicao dinamica/estatica (tipo plugins)
			public void addCommand(MailCommand command) throws EmailException;
		
			public MailCommand getCommand(String commandName) throws EmailException;
		
			// lista todos os comandos registrados
			public List<MailCommand> listAll();
		
			public void addCommandListener(CommandListener listener);
		
			public void reload() throws Exception;
			// TODO outras operacoes
		
		}		
	}
	
	adds {
		package br.unb.cic.iris.command.manager;
		
		import java.lang.reflect.Modifier;
		import java.util.Iterator;
		import java.util.Set;
		
		import br.unb.cic.iris.command.MailCommand;
		import br.unb.cic.iris.core.exception.EmailException;
		import br.unb.cic.iris.reflect.ClassFinder;
		
		public abstract class AbstractCommandManager extends BaseCommandManager {
		
			// disponibilizar esse metodo para os deltas se registrarem,
			// e outros (possiveis) "plugins" (via merge de codigo)
			// e acesso atraves do singleton
			// protected abstract void initialize();
		
			public AbstractCommandManager() {
				try {
					loadClasspathCommands();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					System.exit(-1);
				} catch (InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					System.exit(-1);
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					System.exit(-1);
				} catch (EmailException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					System.exit(-1);
				}
			}
		
			public void reload() throws Exception {
				loadClasspathCommands();
			}
		
			private void loadClasspathCommands() throws ClassNotFoundException,
					InstantiationException, IllegalAccessException, EmailException {
				System.out.println("Scanning commands ...");
		
				// commandMap = Collections.synchronizedMap(new HashMap<>());
		
				ClassFinder classFinder = new ClassFinder(MailCommand.class);
				Set classesFound = classFinder.getClasses();
				for (Iterator it = classesFound.iterator(); it.hasNext();) {
					String clazzName = it.next().toString();
		
					Class c = Class.forName(clazzName);
					if (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {
						MailCommand command = (MailCommand) c.newInstance();
						addCommand(command);
					}
				}
		
				System.out.println("Total commands found: " + listAll().size());
			}
		
		}
		
	}
	
	adds {
		package br.unb.cic.iris.command.manager;
		
		import br.unb.cic.iris.i18n.MessageBundle;
		
		import java.util.HashSet;
		import java.util.List;
		import java.util.Set;
		
		import br.unb.cic.iris.command.CommandListener;
		import br.unb.cic.iris.command.ICommandManager;
		import br.unb.cic.iris.command.MailCommand;
		import br.unb.cic.iris.core.BaseManager;
		import br.unb.cic.iris.core.exception.EmailException;
		
		public abstract class BaseCommandManager implements ICommandManager {
			private BaseManager<MailCommand> manager = new BaseManager<MailCommand>();
			private Set<CommandListener> commandListeners = new HashSet<CommandListener>();
		
			// metodo para complementar a adicao do command. opcional
			// EX: um ambiente gui pode add um botao para esse command
			protected abstract void handleAddCommand(MailCommand command);
		
			public void addCommand(MailCommand command) throws EmailException {
				System.out.println("Adding command: " + command.getCommandName());
				// TODO validar comando?
				manager.add(command.getCommandName(), command);
		
				handleAddCommand(command);
		
				notifyListeners(command);
			}
		
			public MailCommand getCommand(String commandName) throws EmailException {
				MailCommand command = manager.get(commandName);
				if (command == null) {
					throw new EmailException(MessageBundle.message("error.command.not.found", new String[] {commandName}));
				}
				return command;
			}
		
			@Override
			public List<MailCommand> listAll() {
				return manager.getAll();
			}
		
			public void addCommandListener(CommandListener listener) {
				commandListeners.add(listener);
			}
		
			private void notifyListeners(MailCommand command) {
				// commandListeners.forEach(n -> n.commandAdded(command));
				for (CommandListener listener : commandListeners) {
					listener.commandAdded(command);
				}
			}
		
			@Override
			public void reload() throws Exception {
				// TODO manager.clear();
			}
		
		}
		
	}

	adds {
		package br.unb.cic.iris.command.manager;
		
		import br.unb.cic.iris.command.MailCommand;
		
		public class SimpleCommandManager extends BaseCommandManager {
		
			// sera usado se usar command com composite, para gerenciar os subcomandos
		
			@Override
			protected void handleAddCommand(MailCommand command) {
				// TODO Auto-generated method stub
		
			}
		
		}		
	}
	adds{
		package br.unb.cic.iris.reflect;

		/*
		 * The contents of this file are subject to the Sapient Public License
		 * Version 1.0 (the "License"); you may not use this file except in compliance
		 * with the License. You may obtain a copy of the License at
		 * http://carbon.sf.net/License.html.
		 *
		 * Software distributed under the License is distributed on an "AS IS" basis,
		 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
		 * the specific language governing rights and limitations under the License.
		 *
		 * The Original Code is The Carbon Component Framework.
		 *
		 * The Initial Developer of the Original Code is Sapient Corporation
		 *
		 * Copyright (C) 2003 Sapient Corporation. All Rights Reserved.
		 */
		
		import java.io.File;
		import java.util.Enumeration;
		import java.util.HashSet;
		import java.util.Iterator;
		import java.util.Set;
		import java.util.StringTokenizer;
		import java.util.zip.ZipEntry;
		import java.util.zip.ZipFile;
		
		/**
		 * <p>
		 * This class implements the capability to search over the current classpath
		 * retrieving classes that implement a certain interface.
		 * </p>
		 *
		 * Copyright 2001 Sapient
		 * 
		 * @since carbon 1.0
		 * @author Greg Hinkle, June 2001
		 * @version $Revision: 1.10 $($Author: dvoet $ / $Date: 2003/05/05 21:21:23 $)
		 */
		public class ClassFinder {
		
			/**
			 * Tracks the count of classes found that match the provided criteria.
			 */
			protected long foundClasses = 0;
		
			/**
			 * The super class criteria
			 */
			protected Class superClass = null;
			/**
			 * The required substring path criteria for this searcher
			 */
			protected String requiredPathSubstring = null;
			/**
			 * The set of classes found matching the provided criteria.
			 */
			protected Set classes = new HashSet(2000);
		
			/**
			 * <p>
			 * Instantiates the type of MBeanHarvester that will return all classes in
			 * the entire classpath.
			 * </p>
			 */
			public ClassFinder() {
		
			}
		
			/**
			 * <p>
			 * Instantiates the type of MBeanHarvester that will return all classes that
			 * are assignable to the supplied class. This would include all
			 * implementations of it, if it is an interface or it and all subclasses of
			 * it if it's a class.
			 * </p>
			 *
			 * @param superClass
			 *            the Class that should be searched for along with
			 *            implementations and subclasses
			 */
			public ClassFinder(Class superClass) {
				this.superClass = superClass;
		
			}
		
			/**
			 * <p>
			 * Instantiates the type of MBeanHarvester that will return all classes that
			 * are assignable to the supplied class and are part of the supplied
			 * package. This would include all implementations of it, if it is an
			 * interface or it and all subclasses of it if it's a class. The supplied
			 * <code>requiredPathSubstring must be part of the fully
			 * qualified classname.
			 * </p>
			 *
			 * @param superClass
			 *            the Class that should be searched for along with
			 *            implementations and subclasses
			 * @param requiredPathSubstring
			 *            the String part that must be found in the classes FQN
			 */
			public ClassFinder(Class superClass, String requiredPathSubstring) {
				this.superClass = superClass;
		
				this.requiredPathSubstring = requiredPathSubstring;
			}
		
			/**
			 * <p>
			 * Adds a class name to the list of found classes if and only if it meets
			 * the configured requirements.
			 * </p>
			 *
			 * @param className
			 *            the FQN String name of the class to add
			 */
			protected void addClassName(String className) {
		
				// Only add this class if we're not checking for a particular
				// substring of the FQN or we find that substring
				if ((this.requiredPathSubstring == null)
						|| (className.indexOf(this.requiredPathSubstring) >= 0)) {
		
					if (this.superClass == null) {
						this.classes.add(className);
					} else {
						try {
		
							// TODO: GH - add a way to search other classpaths and the
							// system classpath.
							Class theClass = Class.forName(className, false, this
									.getClass().getClassLoader());
		
							if (this.superClass.isAssignableFrom(theClass)) {
								this.classes.add(className);
							}
						} catch (ClassNotFoundException cnfe) {
							// Used to catch mis-parsed classnames
						} catch (Throwable t) {
							// Used to catch JVM security and linkage errors
						}
					}
				}
			}
		
			/**
			 * <p>
			 * Used to retrieve the results <code>Set</code> from this harvester's
			 * search.
			 * </p>
			 *
			 * @return Set the set of classes that meet this harvester's requirements
			 */
			public Set getClasses() {
		
				// 1) tokenize classpath
				String classpath = System.getProperty("java.class.path");
				String pathSeparator = System.getProperty("path.separator");
		
				StringTokenizer st = new StringTokenizer(classpath, pathSeparator);
		
				// 2) for each element in the classpath
				while (st.hasMoreTokens()) {
					File currentDirectory = new File(st.nextToken());
		
					processFile(currentDirectory.getAbsolutePath(), "");
		
				}
		
				return this.classes;
			}
		
			/**
			 * Recursively search through Directories with special checks to recognize
			 * zip and jar files. (Zip and Jar files return true from
			 * &lt;File&gt;.isDirectory())
			 * 
			 * @param base
			 *            the base file path to search
			 * @param current
			 *            the current recursively searched file path being searched
			 */
			private void processFile(String base, String current) {
				File currentDirectory = new File(base + File.separatorChar + current);
		
				// Handle special for archives
				if (isArchive(currentDirectory.getName())) {
					try {
						processZip(new ZipFile(currentDirectory));
					} catch (Exception e) {
						// The directory was not found so the classpath was probably in
						// error or we don't have rights to it
					}
					return;
				}
				Set directories = new HashSet();
		
				File[] children = currentDirectory.listFiles();
		
				// if no children, return
				if (children == null || children.length == 0) {
					return;
				}
		
				// check for classfiles
				for (int i = 0; i < children.length; i++) {
					File child = children[i];
					if (child.isDirectory()) {
						directories.add(children[i]);
					} else {
						if (child.getName().endsWith(".class")) {
							String className = getClassName(current
									+ ((current == "") ? "" : File.separator)
									+ child.getName());
							addClassName(className);
							this.foundClasses++;
						}
					}
				}
		
				// call process file on each directory. This is an iterative call!!
				for (Iterator i = directories.iterator(); i.hasNext();) {
					processFile(base, current + ((current == "") ? "" : File.separator)
							+ ((File) i.next()).getName());
				}
			}
		
			/**
			 * <p>
			 * Looks at the name of a file to determine if it is an archive
			 * </p>
			 * 
			 * @param name
			 *            the name of a file
			 * @return true if a file in the classpath is an archive such as a Jar or
			 *         Zip file
			 */
			protected boolean isArchive(String name) {
				if ((name.endsWith(".jar") || (name.endsWith(".zip")))) {
		
					return true;
				} else {
					return false;
				}
			}
		
			/**
			 * <p>
			 * Returns the Fully Qualified Class name of a class from it's path
			 * 
			 * @param fileName
			 *            the full path to a class
			 * @return the FQN of a class
			 */
			protected String getClassName(String fileName) {
				String newName = fileName.replace(File.separatorChar, '.');
				// Because zipfiles don't have platform specific seperators
				newName = newName.replace('/', '.');
				return newName.substring(0, fileName.length() - 6);
			}
		
			/**
			 * <P>
			 * Iterates through the files in a zip looking for files that may be
			 * classes. This is not recursive as zip's in zip's are not searched by the
			 * classloader either.
			 * </p>
			 *
			 * @param file
			 *            The ZipFile to be searched
			 */
			protected void processZip(ZipFile file) {
				Enumeration files = file.entries();
		
				while (files.hasMoreElements()) {
					Object tfile = files.nextElement();
					ZipEntry child = (ZipEntry) tfile;
					if (child.getName().endsWith(".class")) {
						addClassName(getClassName(child.getName()));
		
						this.foundClasses++;
					}
				}
			}
		}
	}

	adds{
		package br.unb.cic.iris.reflect;

		import java.net.MalformedURLException;
		import java.net.URL;
		import java.net.URLClassLoader;
		
		//preparando para carregar "plugins" dinamicamente
		public class JarFileLoader extends URLClassLoader {
			public JarFileLoader(URL[] urls) {
				super(urls);
			}
		
			public void addFile(String path) throws MalformedURLException {
				String urlPath = "jar:file://" + path + "!/";
				addURL(new URL(urlPath));
			}
		}
	}
}